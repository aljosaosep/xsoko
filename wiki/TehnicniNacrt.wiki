#summary Tehnični načrt xpaca

----
= Vsebina =
 # Uvod
 # Orodja, knjižnjice
 # Glavne procedure
----

= 1. Uvod =
Tole je dokument, ki se nanaša na tehnični vidik igre oz. pogona; vsebuje imena uporabljenih knjižnjic, orodij in same bolj detajlne opise posameznih delov igre. Naj ne gre preveč v podrobnosti, vsaka sekcija mora biti opisana tako, da vsi razumejo(če pa kdo kej ne razume, naj napiše komentar spodaj!!!!)

Pa še to: jaz sem zato, da podobno kot zootfly, imamo nekakšen bolj 'open-policy', torej da kar kdo napiše so, dokler ni splošno sprejeto, zgolj predlogi. Če komu kaj ni kul, naj napiše, pa se prediskutirajo alternative.


= 2. Orodja, knjižnjice =

Kot prvo naj omenim, da bo ta dokument doživel velik update v ponedeljek ali torek, čez vikend se bom mogu posvetit jobu, ker mi je šefe naložil neko delo z katerim se mu zelo mudi :D

Zaenkrat pa tole:

*Uporabljeni jeziki:*
  * C++ za engine
  * Java za level editor

*Knjižnjice*
 * OpenGL za grafični pogon
 * GLFW kot platform-independent vmesnik za OpenGL, input in timer
 * OpenAL za zvok (ma kdo boljše ideje? jaz openal nekaj malega poznam in se mi zdi kul)
 * še kaj? jernej(skrabec) rabiš ti kakšno knjižnjico za paketke? ce ja, dopisi!

*Orodja*
 * zaenkrat se zdi dobra ideja IDE NetBeans (je free, tak da zdownloadajte in sprobajte), tako za javo kot C++

*Dodatne info:*
 * input - vhodne naprave(miška, tipkovnica, ...)
 * NetBeans IDE: http://download.netbeans.org/netbeans/6.1/final/start.html?bundles/netbeans-6.1-cpp-linux.sh&platform=linux&lang=en&option=cpp
 

*Nekaj povezav za OpenGL*
 * http://www.ultimategameprogramming.com/
 * http://zavie.free.fr/opengl/index.html.en
 * http://www.3dgamedesign.org/opengl3.htm
 * http://www.spacesimulator.net/tutorials.html
 * http://nehe.gamedev.net/

= 3. Glavne procedure =

_Nanaša se na game.h objekt_

*initGame()*

Metoda še ni spisana, najprej bo klicala metodo za inicializacijo rendererja, potem se pa nastavijo še dodatni parametri, specifični igri oz. nastavijo začetne vrednosti.
Če gre tu kaj narobe, se izpiše sporočilo o napaki in igra prekine.


*mainLoop()*

Zanka ki teče, dokler se igra izvaja; prekine se le na uporabnikovo željo ali ob dogodku gameOver. 
V osnovi se zanka izvaja tako, da čaka na spremembe na vhodnih napravah(tipkovnici) in kliče metodo za izris scene. 
Zaenkrat je delno implementirana.

 
*processInput()*

 * bo dodana kmalu v game.h razred
 * bo implementirana na podlagi GLFW funkcij za hendlanje inputa
 * glfwGetKey()
 * mislil sem se nekaj napisat, pa moram zle it, se dopolne takoj ko naslednjic priden za racunalnik