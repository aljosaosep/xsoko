#summary Tehnični načrt xpaca

----
= Vsebina =
 # Uvod
 # Orodja, knjižnjice
 # Glavne procedure
 # Level format
----

= 1. Uvod =
Tole je dokument, ki se nanaša na tehnični vidik igre oz. pogona; vsebuje imena uporabljenih knjižnjic, orodij in same bolj detajlne opise posameznih delov igre. Naj ne gre preveč v podrobnosti, vsaka sekcija mora biti opisana tako, da vsi razumejo(če pa kdo kej ne razume, naj napiše komentar spodaj!!!!)

Pa še to: jaz sem zato, da podobno kot zootfly, imamo nekakšen bolj 'open-policy', torej da kar kdo napiše so, dokler ni splošno sprejeto, zgolj predlogi. Če komu kaj ni kul, naj napiše, pa se prediskutirajo alternative.


= 2. Orodja, knjižnjice =

Kot prvo naj omenim, da bo ta dokument doživel velik update v ponedeljek ali torek, čez vikend se bom mogu posvetit jobu, ker mi je šefe naložil neko delo z katerim se mu zelo mudi :D

Zaenkrat pa tole:

*Uporabljeni jeziki:*
  * C++ za engine
  * Java za level editor

*Knjižnjice*
 * OpenGL za grafični pogon
 * GLFW kot platform-independent vmesnik za OpenGL, input in timer
 * OpenAL za zvok (ma kdo boljše ideje? jaz openal nekaj malega poznam in se mi zdi kul)
 * še kaj? jernej(skrabec) rabiš ti kakšno knjižnjico za paketke? ce ja, dopisi!

*Orodja*
 * zaenkrat se zdi dobra ideja IDE NetBeans (je free, tak da zdownloadajte in sprobajte), tako za javo kot C++

*Dodatne info:*
 * input - vhodne naprave(miška, tipkovnica, ...)
 * NetBeans IDE: http://download.netbeans.org/netbeans/6.1/final/start.html?bundles/netbeans-6.1-cpp-linux.sh&platform=linux&lang=en&option=cpp
 


*Nekaj povezav za OpenGL*
 * http://www.ultimategameprogramming.com/
 * http://zavie.free.fr/opengl/index.html.en
 * http://www.3dgamedesign.org/opengl3.htm
 * http://www.spacesimulator.net/tutorials.html
 * http://nehe.gamedev.net/


*GLFW referenca in user guide(zelo uporabno!;))*
 * http://glfw.sourceforge.net/GLFWUsersGuide26.pdf
 * http://glfw.sourceforge.net/GLFWReference26.pdf


= 3. Glavne procedure =

_Nanaša se na game.h objekt_

*initGame()*

Metoda še ni spisana, najprej bo klicala metodo za inicializacijo rendererja, potem se pa nastavijo še dodatni parametri, specifični igri oz. nastavijo začetne vrednosti.
Če gre tu kaj narobe, se izpiše sporočilo o napaki in igra prekine.


*mainLoop()*

Zanka ki teče, dokler se igra izvaja; prekine se le na uporabnikovo željo ali ob dogodku gameOver. 
Zaenkrat je delno implementirana.

 
*processInput()*

 * bo dodana kmalu v game.h razred
 * bo implementirana na podlagi GLFW funkcij za hendlanje inputa
 * void glfwSetKeyCallback( GLFWkeyfun cbfun )

Zgledalo bo takole:
V zanki se izrisuje scena; ce pride do input callbacka se procesira prekinitev za input.
Funkcija preveri, ce je bil pritisnjen kateri od gumbov gor, dol, levo desno, s pomocjo parametra key, ki pove katera tipka je bila pritisnjena/spuscena, in parameter action, ki pove, ali je tipka bila pritisnjena ali spuscena.

Vrne pa vrednost, ki pove, za katero smer se procesira premik - lahko je to nek integer, ali pa enumeracija(enum smer {gor, dol, levo, desno};).
Ali pa informacijo, da se ni zgodilo nic in da se naj stvari meljejo naprej.

= 4. Level format =

Nanasa se na:
 - level.h
 - level.cpp

 - level editor 

Objekti, ki jih je treba izpeljati iz PLevelOBject in bodo prisotni na stopnji:

Tile naj bodo implementirani v level.h:
 * PFloor
 * PSolidWall
 * PUnsolidWall
 * PTeleport
 * PBridge
 * PVoid
 * PCube
 * PCubeHolder
 * POnewayFloor
 * POnewayCube
 * PBomb
 * mogoce sem se kaj pozabil
 
V player.h:
 * PPlayer

V datoteki so ti elementi predstavljeni z id-ji; funkcije za preslikavo iz datoteke v strukturo in obratno na podlagi id-ja ustvarijo objekt ali na podlagi objekta ustvarijo id. 
Sta pa 2 tipa podatkov, prvi id doloca tip elementa, drugi id doloca, kaj je nanj "priklenjeno" (attached). Zato sta v datoteki 2 matriki, ki dolocata kateri elementi so na stopnji in kaj je attached nanje.
Jernej, objavi ze sliko!!!!
Npr, ce predpostavljam, da je st. 1 tla, 2 je zid(prva matrika) in za drugo matriko je 1 igralec in 2 kocka, potem branje izgleda takole(psevdo):

{{{
while(niFertik())
{
 x = preberiPodatekIzMatrike1();
 if(x == 1)
     stopnja[i++][j++] = new PTla();
 else if(x == 2)
     stopnja[i++][j++] = new PZid();
 ....
}
}}}

Druga matrika:
{{{
while(niFertik())
{
 x = preberiPodatekIzMatrike2();
 PObject *novi = NULL;
 if(x == 1)
     novi = new PPlayer();
 else if(x == 2)
     novi = new PCube();
 ....

 stopnja[i++][j++]->attachNode(novi);
}
}}}

ID-ji elementov v datoteki:

*prva matrika:*
  * Tla -- *0* _(PFloor)_
  * Enosmerna tla -- *1* _(POneWayFloor)_
  * Neprebojni zid -- *2* _(PSolidWall)_
  * Prebojni zid -- *3* _(PUnsolidWall)_
  * PTeleport -- *4* _(PTeleport)_
  * Most -- *5* _(PBridge)_
  * Nic/Prepad -- *6* _(PVoid)_
  * Prostor za kocko *7* _(PCubeHolder)_

*druga matrika:*
  * Nic(el. nima otroka, npr. zid) -- *0*
  * Igralec -- *1* (PPlayer)_
  * Kocka -- *2* (PCube)_
  * Enosmerna kocka levo -- *3* _(POnewayCube)_
  * Enosmerna kocka desno -- *4* _(POnewayCube)_
  * Enosmerna kocka gor -- *5* _(POnewayCube)_
  * Enosmerna kocka dol -- *6* _(POnewayCube)_
  * Bomba -- *7* _(PBomb)_
  * ID za smer enosmerne kocke -- *8-levo, 9-desno, 10-gor, 11-dol*
  * ID starsevskega teleporta -- *> 11*

Ce kdo med programiranjem ugotovi, da z temi id-ji kaj ne stima, naj prosim popravi wiki, in nekam na grupo napise, da nekaj ne stima in zakaj ne stima!
Naceloma spreminjanje tega ni zazeljeno; ce se bo spreminjalo, naj bo razlog res dober!

Spodobi se in pravicno je, da se v kodi uporabljajo naslednji makri(da bo lazje berljivo):

{{{
// MATRIKA 1
#define FLOOR 0 
#define OW_FLOOR 1 // (POneWayFloor)
#define S_WALL 2 //  (PSolidWall)
#define U_WALL 3 // (PUnsolidWall)
#define TELEPORT 4 // (PTeleport)
#define BRIDGE 5 // (PBridge)
#define VOID 6 // (PVoid) 
#define CUBE_PLACE 7

// MATRIKA 2
#define NO_CHILD 0
#define PLAYER 1 // (PPlayer)
#define CUBE 2 // (PCube)
#define OW_CUBE_L 3 // (POnewayCube)
#define OW_C_CUBE_R 4 // (POnewayCube)
#define OW_CUBE_U 5 // (POnewayCube)
#define OW_CUBE_D 6 // (POnewayCube)
#define BOMB 7 // (PBomb)

// ID za smer enosmerne kocke  
#define LEFT 8
#define RIGHT 9
#define UP 10 
#define DOWN 11
}}}

*Testni level*

Naredil sem nek tesni level v beleznici, ki prikazuje kaksen je format levela:
{{{
12 7
2 2 2 2 2 2 2 2 2 2 2 2
2 0 0 0 0 0 0 0 0 0 0 2
2 0 0 0 0 0 0 0 0 0 0 2
2 0 0 0 6 6 6 0 0 0 0 2
2 4 0 0 0 0 0 0 0 0 0 2
2 0 0 7 7 0 0 0 0 0 4 2
2 2 2 2 2 2 2 2 2 2 2 2
+
0 0 0 0 0 0 0 0 0 0 0 0
0 0 1 0 0 0 0 2 2 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 0 0
0 11 0 0 0 0 0 0 0 0 0 0
0 0 0 0 0 0 0 0 0 0 12 0
0 0 0 0 0 0 0 0 0 0 0 0
+
2
11 12
12 11
}}}

Najprej to: presledki med stevilkami so obvezni!
Torej matrika

222

222

222 

NI ok!
Mora bit

2 2 2

2 2 2

2 2 2

Ker drugace ne bomo mogl locit med zaporedima celicama z vred. 1 in 2 in st. 12!

Prva vrstica pove dimenzijo stopnje: 12x7

Naslednjih 7 vrstic predstavlja matriko st. 1.

Med matriko 1 in 2 je vmes znak +.

Sledi 7 vrstic matrike 2, in za njo spet + , ki je locilo med matriko 2 in teleport matriko.

Po + sledi st. 2, ki pomeni teleport matriko velikosti 2 (2x2)
Sledi info, ki pove, kako so si teleporti v relaciji:

 -- otrok od teleporta z id 11 je teleport z id 12

 -- otrok od teleporta z id 12 je teleport z id 11

Za taksen format bom jaz zdaj pisal funkcije za lovdanje stopenj; ce kdo najde kaksen "error", naj cimprej pove! Da ne bomo programirali za not-ok format stopnje.

Ce komu ni kaj jasno, naj vprasa! (ce sploh kdo to bere :D)
 
= 5. Gameplay =
